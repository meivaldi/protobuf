// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: gaplek.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JitterClient is the client API for Jitter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JitterClient interface {
	GetJitter(ctx context.Context, in *JitterRequest, opts ...grpc.CallOption) (*JitterResponse, error)
}

type jitterClient struct {
	cc grpc.ClientConnInterface
}

func NewJitterClient(cc grpc.ClientConnInterface) JitterClient {
	return &jitterClient{cc}
}

func (c *jitterClient) GetJitter(ctx context.Context, in *JitterRequest, opts ...grpc.CallOption) (*JitterResponse, error) {
	out := new(JitterResponse)
	err := c.cc.Invoke(ctx, "/gaplek.Jitter/GetJitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JitterServer is the server API for Jitter service.
// All implementations must embed UnimplementedJitterServer
// for forward compatibility
type JitterServer interface {
	GetJitter(context.Context, *JitterRequest) (*JitterResponse, error)
	mustEmbedUnimplementedJitterServer()
}

// UnimplementedJitterServer must be embedded to have forward compatible implementations.
type UnimplementedJitterServer struct {
}

func (UnimplementedJitterServer) GetJitter(context.Context, *JitterRequest) (*JitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJitter not implemented")
}
func (UnimplementedJitterServer) mustEmbedUnimplementedJitterServer() {}

// UnsafeJitterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JitterServer will
// result in compilation errors.
type UnsafeJitterServer interface {
	mustEmbedUnimplementedJitterServer()
}

func RegisterJitterServer(s grpc.ServiceRegistrar, srv JitterServer) {
	s.RegisterService(&Jitter_ServiceDesc, srv)
}

func _Jitter_GetJitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JitterServer).GetJitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaplek.Jitter/GetJitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JitterServer).GetJitter(ctx, req.(*JitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jitter_ServiceDesc is the grpc.ServiceDesc for Jitter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jitter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gaplek.Jitter",
	HandlerType: (*JitterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJitter",
			Handler:    _Jitter_GetJitter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaplek.proto",
}
